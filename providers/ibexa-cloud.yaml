#ddev-generated
# Ibexa Cloud provider configuration. This works out of the box, but can be edited to add
# your own preferences. If you edit it, remove the `ddev-generated` line from the top so
# that it won't be overwritten.

# The basic intent is to make `ddev pull ibexa-cloud` work.

# To use this configuration,

# 1. Check out the site from Ibexa Cloud and then configure it with `ddev config`. You'll want to use `ddev start` and make sure the basic functionality is working.
# 2. Obtain and configure an API token.
#    a. Login to the Ibexa Cloud Dashboard and go to Account->API Tokens to create an API token for ddev to use.
#    b. Add the API token to the `web_environment` section in your global ddev configuration at ~/.ddev/global_config.yaml:
#    ```yaml
#    web_environment:
#    - IBEXA_CLI_TOKEN=abcdeyourtoken
#    ```
# 3. Add IBEXA_PROJECT and IBEXA_ENVIRONMENT and optional IBEXA_APP (only if your environment contains more than one app) variables to your project `.ddev/config.yaml` or a `.ddev/config.ibexa-cloud.yaml`
#    ```yaml
#    web_environment:
#    - IBEXA_PROJECT=nf4amudfn23biyourproject
#    - IBEXA_ENVIRONMENT=main
#    - IBEXA_APP=app
# 4. `ddev restart`
# 5. Run `ddev pull ibexa-cloud`. After you agree to the prompt, the current upstream database and files will be downloaded.
# 6. Optionally use `ddev push ibexa-cloud` to push local files and database to Ibexa Cloud. Note that `ddev push` is a command that can potentially damage your production site, so this is not recommended.

# If you have more than one database on your Ibexa Cloud project,
# you will likely to choose which one you want to use
# as the primary database ('db').
# Do this by setting PRIMARY_RELATIONSHIP, for example, `ddev config --web-environment-add=PRIMARY_RELATIONSHIP=main`
# or run `ddev pull ibexa-cloud` with the environment variable, for example
# `ddev pull ibexa-cloud -y --environment=PRIMARY_RELATIONSHIP=main`
# If you need to change this `ibexa-cloud.yaml` recipe, you can change it to suit your needs, but remember to remove the "ddev-generated" line from the top.

# Debugging: Use `ddev exec ibexa-cloud` to see what Ibexa Cloud knows about
# your configuration and whether it's working correctly.

auth_command:
  command: |
    set -eu -o pipefail
    if [ -z "${IBEXA_CLI_TOKEN:-}" ]; then echo "Please make sure you have set IBEXA_CLI_TOKEN." && exit 1; fi
    if [ -z "${IBEXA_PROJECT:-}" ]; then echo "Please make sure you have set IBEXA_PROJECT." && exit 1; fi
    if [ -z "${IBEXA_ENVIRONMENT:-}" ]; then echo "Please make sure you have set IBEXA_ENVIRONMENT." && exit 1; fi

db_pull_command:
  command: |
    # set -x   # You can enable bash debugging output by uncommenting
    set -eu -o pipefail
    export IBEXA_CLI_NO_INTERACTION=1
    # /tmp/db_relationships.yaml is the full yaml output of the database relationships
    db_relationships_file=/tmp/db_relationships.yaml
    RELATIONSHIPS="" ibexa_cloud relationships -y  -p "${IBEXA_PROJECT}" -e "${IBEXA_ENVIRONMENT}" ${IBEXA_APP:+"--app=${IBEXA_APP}"} | yq 'with_entries(select(.[][].type == "mariadb:*" or .[][].type == "*mysql:*" or .[][].type == "postgresql:*")) ' >${db_relationships_file}
    db_relationships=($(yq ' keys | .[] ' ${db_relationships_file}))
    db_names=($(yq '.[][].path' ${db_relationships_file}))
    db_count=${#db_relationships[@]}
    # echo "db_relationships=${db_relationships} sizeof db_relationships=${#db_relationships[@]} db_names=${db_names} db_count=${db_count} PRIMARY_RELATIONSHIP=${PRIMARY_RELATIONSHIP}"
    # If we have only one database, import it into local database named 'db'
    if [ ${#db_names[@]} -eq 1 ]; then db_names[0]="db"; fi

    for (( i=0; i<${#db_relationships[@]}; i++ )); do
      db_name=${db_names[$i]}
      rel=${db_relationships[$i]}
      # if PRIMARY_RELATIONSHIP is set, then when doing that one, import it into local database 'db'
      if [ "${rel}" = "${PRIMARY_RELATIONSHIP:-notset}" ] ; then
        echo "PRIMARY_RELATIONSHIP=${PRIMARY_RELATIONSHIP:-} so using it as database 'db' instead of the upstream '${db_name}'"
        db_name="db"
      fi

      ibexa_cloud db:dump --yes ${IBEXA_APP:+"--app=${IBEXA_APP}"} --relationship=${rel} --gzip --file=/var/www/html/.ddev/.downloads/${db_name}.sql.gz --project="${IBEXA_PROJECT:-setme}" --environment="${IBEXA_ENVIRONMENT:-setme}"
    done
    echo "Downloaded db dumps for databases '${db_names[@]}'"

files_import_command:
  command: |
    #set -x   # You can enable bash debugging output by uncommenting
    set -eu -o pipefail
    export IBEXA_CLI_NO_INTERACTION=1
    # Use $MOUNTS if it exists to get list of mounts to download, otherwise just web/sites/default/files (drupal)
    declare -a mounts=(${MOUNTS:-/web/sites/default/files})
    ibexa_cloud mount:download --all --yes --quiet --project="${IBEXA_PROJECT}" --environment="${IBEXA_ENVIRONMENT}" ${IBEXA_APP:+"--app=${IBEXA_APP}"} --target=/var/www/html


# push is a dangerous command. If not absolutely needed it's better to delete these lines.
db_push_command:
  command: |
    # set -x   # You can enable bash debugging output by uncommenting
    set -eu -o pipefail
    export IBEXA_CLI_NO_INTERACTION=1
    pushd /var/www/html/.ddev/.downloads >/dev/null;
    if [ "${PRIMARY_RELATIONSHIP:-}" != "" ] ; then
      rel="--relationship ${PRIMARY_RELATIONSHIP}"
    fi
    gzip -dc db.sql.gz | ibexa_cloud db:sql --project="${IBEXA_PROJECT}" ${rel:-} --environment="${IBEXA_ENVIRONMENT}" ${IBEXA_APP:+"--app=${IBEXA_APP}"}

# push is a dangerous command and should not be used against a production target
files_push_command:
  command: |
    # set -x   # You can enable bash debugging output by uncommenting
    set -eu -o pipefail
    export IBEXA_CLI_NO_INTERACTION=1
    ibexa_cloud mount:upload --yes --quiet --project="${IBEXA_PROJECT}" --environment="${IBEXA_ENVIRONMENT}" ${IBEXA_APP:+"--app=${IBEXA_APP}"} --source="${DDEV_FILES_DIR}" --mount=web/sites/default/files
